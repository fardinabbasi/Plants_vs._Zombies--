{"date":"2024-05-13T20:14:17.955Z","courseId":"17","assignment":"AP-Spring03-CA5","trace":{"version":896,"content":"#include \"Battle.hpp\"\n\nBattle::Battle(map<string, map<string, int>>& config): \nconfig(config), BaseScreen(\"BackGround.png\", \"Loonboon.ogg\")\n{\n    clock.restart();\n    state = BATTLE;\n    sun = new Sun(config[\"Sun\"], background_sp.getGlobalBounds());\n    interval = 0;\n}\n\nState Battle::render(RenderWindow &window){\n    update();\n    if(music.getStatus() != Music::Playing)\n        music.play();\n    window.draw(background_sp);\n    for_each(zombies.begin(), zombies.end(), [&window](BaseZombie* zombie){ zombie->render(window); });\n    sun->render(window);\n    window.display();\n    return state;\n}\n\nvoid Battle::mouse_press(int x, int y){\n    if(!sun->mouse_press(x, y)){\n        auto it = find_if(deck.begin(), deck.end(), [x,y](Card* card) { card.contains(x,y); });\n        if(it != deck.end())\n            chosen_card = it->get_name();\n        else\n            chosen_card = \"\";\n    }\n}\n\nvoid Battle::mouse_release(int x, int y){\n    if(!chosen_card.empty() && in_battle_feild(x,y)){\n\n    }\n\n    chosen_card = \"\";\n}\n\nVector2f Battle::find_position(int x, int y){\n    Vector2f nearest_point;\n    double min_distance = numeric_limits<double>::max();\n    for (unsigned int i = 0; i < WIDTH_GRIDS.size(); ++i) {\n        for (unsigned int j = 0; j < HEIGHT_GRIDS.size(); ++j) {\n        Vector2f current_point();\n        double current_distance = sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));;\n\n        // Update nearest point if current point is closer\n        if (current_distance < min_distance) {\n            min_distance = current_distance;\n            nearest_point = current_point;\n        }\n        }\n    }\n\n    return nearest_point;\n}\n\nbool Battle::in_battle_feild(int x, int y){\n    return x >= BATTLE_FIELD.left + background_sp.getGlobalBounds().left\n    && x <= BATTLE_FIELD.left + BATTLE_FIELD.width + background_sp.getGlobalBounds().left\n    && y >= BATTLE_FIELD.top + background_sp.getGlobalBounds().top\n    && y <= BATTLE_FIELD.top + BATTLE_FIELD.height + background_sp.getGlobalBounds().top;\n}\n\nBattle::~Battle(){\n    for_each(zombies.begin(), zombies.end(), [](BaseZombie* zombie){ delete zombie; });\n    for_each(plants.begin(), plants.end(), [](Plant* plant){ delete plant; });\n    delete sun;\n}\n\nvoid Battle::update(){\n    attack();\n    find_target();\n}\n\nvoid Battle::find_target(){\n    auto plant_it = plants.begin();\n    auto zombie_it = zombies.begin();\n\n    while(plant_it != plants.end()){\n        if((*plant_it)->dead()){\n            plant_it = plants.erase(plant_it);\n            continue;\n        }\n        while (zombie_it != zombies.end()){\n            if((*zombie_it)->dead()){\n                zombie_it = zombies.erase(zombie_it);\n                continue;\n            }   \n            (*zombie_it)->set_target(*plant_it);\n            (*plant_it)->set_target(*zombie_it);\n            ++zombie_it;\n        }\n        ++plant_it;\n    }\n}\n\nvoid Battle::attack(){\n    if(any_of(zombies.begin(), zombies.end(),[](BaseZombie& zombie){ zombie.win(); })){\n        state = GAMEOVER;\n        return;\n    }\n    else if (clock.getElapsedTime().asSeconds() >= config[\"Attacks\"][\"TotalTime\"]){\n        state = VICTORY;\n        return;\n    }\n    unsigned int num_intervals = config[\"Attacks\"][\"TotalTime\"]/config[\"Attacks\"][\"Interval\"];\n    float elapsed = clock.getElapsedTime().asSeconds();\n    for (unsigned int i = 1; i <= num_intervals; i++){\n        if ((i-1)*config[\"Attacks\"][\"Interval\"] <= elapsed && i*config[\"Attacks\"][\"Interval\"] > elapsed){\n            if(i != interval){\n                interval = i;\n                make_zombies();\n            }\n            break;\n        }\n    }\n}\n\nvoid Battle::make_zombies(){\n    unsigned int num_zombies = config[\"Attacks\"][\"StartingNum\"] + (interval-1) * config[\"Attacks\"][\"IncNum\"];\n    unsigned int num_gargantuar = num_zombies * GARGANTUAR_RATIO;\n    for (unsigned int i = 0; i < num_gargantuar; i++){\n        zombies.push_back(new BaseZombie(config[\"Gargantuar\"], \"Gargantuar.png\", background_sp.getGlobalBounds()));\n    }\n    for (unsigned int i = 0; i < (num_zombies-num_gargantuar); i++){\n        zombies.push_back(new BaseZombie(config[\"Zombie\"], \"Zombie.png\", background_sp.getGlobalBounds()));\n    }\n}","filename":"/media/sf_AP/HW/HW5/Plants_vs._Zombies--/src/Battle.cpp","identifier":"Text Change","lineCount":131,"languageId":"cpp"},"failed":false}